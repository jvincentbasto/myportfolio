@use "~@/sass/mixins/mixins" as mxs;
@use "~@/sass/functions/functions" as fns;


// DEFINE color properties
@mixin defineColorProperties($name: '',$hue: 0,$sat: 0%,$lum: 0%,$lightsat: 0%,$darksat: 0%,$lightlum: 0%,$darklum: 0%) {

	$varname: '';
	@if $name == '' { $varname: '' }
	@else { $varname: '-#{$name}' }

	--dc#{$varname}-hue: #{$hue};
	--dc#{$varname}-sat: #{$sat};
	--dc#{$varname}-lum: #{$lum};

	--dc#{$varname}-lightsat: #{$lightsat};
	--dc#{$varname}-darksat: #{$darksat};
	--dc#{$varname}-lightlum: #{$lightlum};
	--dc#{$varname}-darklum: #{$darklum};
}
// DYNAMIC color properties
@mixin dynamicColorProperties($name: '') {

	$varname: '';
	@if $name == '' { $varname: '' }
	@else { $varname: '-#{$name}' }

	--c#{$varname}-hue: var(--dc#{$varname}-hue);
	--c#{$varname}-sat: var(--dc#{$varname}-sat);
	--c#{$varname}-lum: var(--dc#{$varname}-lum);

	--c#{$varname}-lightsat: var(--dc#{$varname}-lightsat);
	--c#{$varname}-darksat: var(--dc#{$varname}-darksat);
	--c#{$varname}-lightlum: var(--dc#{$varname}-lightlum);
	--c#{$varname}-darklum: var(--dc#{$varname}-darklum);
}
// HELPER: validate color property
@function validateColorProperty($prop: '',$default: '') {

	$varprop: '';
	@if $prop == '' { $varprop: #{$default} }
	@else { $varprop: #{$prop} }

	@return $varprop;
}
// DEFINE color variables
@mixin defineColorVariables($colorname,$name: '',$mode: light,$sat: '',$lum: '') {
	
	$varsat: '';
	$varlum: '';

	@if $mode == light {
		@if $colorname == 'lprimary' { $varsat: validateColorProperty($sat,'sat'); $varlum: validateColorProperty($lum,'lum') }
		@else if $colorname == 'dprimary' { $varsat: validateColorProperty($sat,'sat'); $varlum: validateColorProperty($lum,'darklum') }
		@else if $colorname == 'white' { $varsat: validateColorProperty($sat,'lightsat'); $varlum: validateColorProperty($lum,'lightlum') }
		@else if $colorname == 'black' { $varsat: validateColorProperty($sat,'darksat'); $varlum: validateColorProperty($lum,'darklum') }
		@else if $colorname == 'grey' { $varsat: validateColorProperty($sat,'darksat'); $varlum: validateColorProperty($lum,'lum') }
	}
	@else if $mode == dark {
		@if $colorname == 'lprimary' { $varsat: validateColorProperty($sat,'sat'); $varlum: validateColorProperty($lum,'darklum') }
		@else if $colorname == 'dprimary' { $varsat: validateColorProperty($sat,'sat'); $varlum: validateColorProperty($lum,'lum') }
		@else if $colorname == 'white' { $varsat: validateColorProperty($sat,'darksat'); $varlum: validateColorProperty($lum,'darklum') }
		@else if $colorname == 'black' { $varsat: validateColorProperty($sat,'lightsat'); $varlum: validateColorProperty($lum,'lightlum') }
		@else if $colorname == 'grey' { $varsat: validateColorProperty($sat,'darksat'); $varlum: validateColorProperty($lum,'darklum') }
	}
	
	@include mxs.varHsl(--c#{$name}-#{$colorname},var(--c#{$name}-hue),var(--c#{$name}-#{$varsat}),var(--c#{$name}-#{$varlum}));
}



/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */



// DEFAULT color properties
@mixin defaultColorProperties($color: 'blue',$name: '') {
	@if $color == 'blue' {
		@include defineColorProperties($name,202,41%,70%,90%,11%,90%,10%);
	}
	@if $color == 'green' {
		@include defineColorProperties($name,142,40%,70%,90%,10%,90%,10%);
	}
	@if $color == 'brown' {
		@include defineColorProperties($name,16,100%,50%,100%,10%,90%,10%);
	}
}
// CUSTOM light color properties
@mixin customLightColorProperties($color: 'blue',$name: '') {
	@if $color == 'brown' {
		@include defineColorProperties($name,16,100%,50%,100%,10%,90%,10%);
	}
}
// CUSTOM dark color properties
@mixin customDarkColorProperties($color: 'blue',$name: '') {
	// @if $color == 'brown' {
	// 	@include defineColorProperties($name,16,100%,50%,100%,10%,90%,10%);
	// }
}
// CUSTOM color properties
@mixin customColorProperties($color: 'blue',$name: '',$mode: light) {
	@if $mode == light {
		@include customLightColorProperties($color,$name);
	}
	@else if $mode == dark {
		@include customDarkColorProperties($color,$name);
	}
}



/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */



// DEFAULT color variables
@mixin defaultColorVariables($name: '',$mode: light) {
	@if $mode == light {
		@include defineColorVariables('lprimary',$name);
		@include defineColorVariables('dprimary',$name);
		@include defineColorVariables('white',$name);
		@include defineColorVariables('black',$name);
		@include defineColorVariables('grey',$name);
	}
	@else if $mode == dark {
		@include defineColorVariables('lprimary',$name,dark);
		@include defineColorVariables('dprimary',$name,dark);
		@include defineColorVariables('white',$name,dark);
		@include defineColorVariables('black',$name,dark);
		@include defineColorVariables('grey',$name,dark);
	}
}
// CUSTOM light color variables
@mixin customLightColorVariables($color: 'blue',$name: '') {
	$mode: light;

	@if $color == 'blue' {
		@include defineColorVariables('lprimary',$name,$mode,'sat','lum');
	}
}
// CUSTOM dark color variables
@mixin customDarkColorVariables($color: 'blue',$name: '') {
	$mode: dark;

	@if $color == 'blue' {
		@include defineColorVariables('lprimary',$name,$mode,'sat','darklum');
	}
}
// CUSTOM color variables
@mixin customColorVariables($color: 'blue',$name: '',$mode: light) {
	@if $mode == light {
		@include customLightColorVariables($color,$name);
	}
	@else if $mode == dark {
		@include customDarkColorVariables($color,$name);
	}
}



/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */



// SCOPED color properties
@mixin scopedColorProperties($color: 'blue',$name: '',$mode: light,$custom: false) {
	@if $custom == false {
		@include defaultColorProperties($color,$name);
	}
	@else if $custom == true {
		@include customColorProperties($color,$name,$mode);
	}
}
// SCOPED color variables
@mixin scopedColorVariables($color: 'blue',$name: '',$mode: light,$custom: false) {

	$varname: '';
	@if $name == '' { $varname: '' }
	@else { $varname: '-#{$name}' }


	@if $custom == false {
		@include defaultColorVariables($varname,$mode);
	}
	@else if $custom == true {
		@include customColorVariables($color,$varname,$mode);
	}
}
// SCOPED color themes
@mixin scopedColorThemes($color: 'blue',$mode: light,$custom: false,$scope: 'default') {
	
	$varname: '';
	@if $scope == 'default' { $varname: '' }
	@else if $scope == 'independent' { $varname: 'i#{$color}' }


	@include scopedColorProperties($color,$varname,$mode,$custom);
	@include dynamicColorProperties($varname);
	@include scopedColorVariables($color,$varname,$mode,$custom);
}



/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */



// GLOBAL color property variables
@mixin globalColorProperties($color: 'blue',$name: '') {
	@include defaultColorProperties($color,$name);
}
// GLOBAL static color property variables
@mixin globalDynamicColorProperties($mode: light,$name: '') {

  @if $mode == light {
		// natural colors
		@include mxs.varHsla(--c-defwhite,0,0%,90%,.9);
		@include mxs.varHsl(--c-defblack,0,0%,0%);
  }
  @if $mode == dark {
		// natural colors
		@include mxs.varHsl(--c-defwhite,0,0%,0%);
		@include mxs.varHsla(--c-defblack,0,0%,90%,.9);
  }
	@include dynamicColorProperties($name);

}
// GLOBAL color signs
@mixin globalColorSigns($mode: light) {

	// dynamic sign
	@if $mode == light {
		--c-pos: +1;
		--c-neg: -1;
	}
	@if $mode == dark {
		--c-pos: -1;
		--c-neg: +1;
	}
}
// GLOBAL color variables
@mixin globalColorVariables($mode: light,$name: '') {
	@include defaultColorVariables($name,$mode);
}
// GLOBAL color config
@mixin globalColorConfig($color: 'blue',$mode: light,$name: '') {
	@include globalColorProperties($color,$name);
	@include globalDynamicColorProperties($mode,$name);
	@include globalColorVariables($mode);
	@include globalColorSigns($mode);
}



/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */



// Static color properties
@mixin staticColorProperties() {
	--sc-hue: var(--dc-hue);
	--sc-sat: var(--dc-sat);
	--sc-lum: var(--dc-lum);

	--sc-lightsat: var(--dc-lightsat);
	--sc-darksat: var(--dc-darksat);
	--sc-lightlum: var(--dc-lightlum);
	--sc-darklum: var(--dc-darklum);
}
// Static color variables
@mixin staticColorVariables() {
	@include mxs.varHsl(--sc-lprimary,var(--sc-hue),var(--sc-sat),var(--sc-lum));
	@include mxs.varHsl(--sc-dprimary,var(--sc-hue),var(--sc-sat),var(--sc-darklum));
	@include mxs.varHsl(--sc-white,var(--sc-hue),var(--sc-sat),var(--sc-lightlum));
	@include mxs.varHsl(--sc-black,var(--sc-hue),var(--sc-darksat),var(--sc-darklum));
	@include mxs.varHsl(--sc-grey,var(--sc-hue),var(--sc-darksat),var(--sc-lum));

	@include mxs.varHsl(--sc-defwhite,0,0%,90%);
	@include mxs.varHsl(--sc-defblack,0,0%,0%);


	// natural colors
	@include mxs.varHsl(--c-defwhite,0,0%,90%);
	@include mxs.varHsl(--c-defblack,0,0%,0%);
}
// Static color signs
@mixin staticColorSigns() {
	--sc-pos: +1;
	--sc-neg: -1;
}
// Static color config
@mixin staticColorConfig() {
	@include staticColorProperties();
	@include staticColorVariables();
	@include staticColorSigns();
}



/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */



// Independent color themes
@mixin independentColors($mode: light) {
	@if $mode == light {
		@include scopedColorThemes('blue',light,false,'independent');
		@include scopedColorThemes('green',light,false,'independent');
		@include scopedColorThemes('brown',light,false,'independent');
	}
	@else if $mode == dark {
		@include scopedColorThemes('blue',dark,false,'independent');
		@include scopedColorThemes('green',dark,false,'independent');
		@include scopedColorThemes('brown',dark,false,'independent');
	}
}



/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */



/* root colors */
:root {

	// global color config
	@include globalColorConfig('blue',light);

	// static color config
	@include staticColorConfig();

	// independent colors themes
	@include independentColors(light);
}


/* export colors */
:export {
	hslLprimary: --hsl-lprimary;
	hslDprimary: --hsl-dprimary;
	hslWhite: --hsl-white;
	hslGrey: --hsl-grey;
	hslBlack: --hsl-black;


	clPrimary: --c-lprimary;
	cdPrimary: --c-dprimary;
	cWhite: --c-white;
	cBlack: --c-black;
	cGrey: --c-grey;
}



/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */



// GLOBAL LIGHT mode config
@include mxs.configColorThemes('blue') {
	@include globalColorConfig('blue',light);
}
@include mxs.configColorThemes('green') {
	@include globalColorConfig('green',light);
}
@include mxs.configColorThemes('brown') {
	@include globalColorConfig('brown',light);
}
// GLOBAL DARK mode config
@include mxs.configColorModes(dark) {
	@include globalDynamicColorProperties(dark);
	@include globalColorSigns(dark);
	@include globalColorVariables(dark);

	// independent colors themes
	@include independentColors(dark);
}



/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */



// Custom color themes
@include mxs.configColorThemes('brown') {
	// @include scopedColorThemes('brown',light,true);
}



/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */



// INVERTED LIGHT mode
@include mxs.configInvertedModes(light) {
	@include globalDynamicColorProperties(dark);
	@include globalColorSigns(dark);
	@include globalColorVariables(dark);
}
// INVERTED DARK mode
@include mxs.configInvertedModes(dark) {
	@include globalDynamicColorProperties(light);
	@include globalColorSigns(light);
	@include globalColorVariables(dark);
}



/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */



// STATIC LIGHT mode
@include mxs.configStaticModes(light) {
	@include globalDynamicColorProperties(light);
	@include globalColorSigns(light);
	@include globalColorVariables(dark);
}
// STATIC DARK mode
@include mxs.configStaticModes(dark) {
	@include globalDynamicColorProperties(dark);
	@include globalColorSigns(dark);
	@include globalColorVariables(dark);
}
