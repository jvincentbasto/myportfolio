@use "~@/sass/mixins/mixins" as mxs;
@use "~@/sass/functions/functions" as fns;


@mixin colorPropValues($color: blue) {

	// granny smith green
	// hsl(95, 46%, 73%)
	// torq blue
	// hsl(124, 36%, 78%)

	@if $color == blue {
		--dc-hue: 202;
		--dc-sat: 41%;
		--dc-lum: 70%;

		--dc-lightsat: 90%;
		--dc-darksat: 11%;
		--dc-lightlum: 90%;
		--dc-darklum: 10%;
	}
	@if $color == green {
		--dc-hue: 95;
		--dc-sat: 46%;
		--dc-lum: 73%;

		--dc-lightsat: 96%;
		--dc-darksat: 16%;
		--dc-lightlum: 93%;
		--dc-darklum: 13%;
	}
}


// color props/modes mixins
@mixin colorProps($mode: light) {

  @if $mode == light {
		--c-hue: var(--dc-hue);
		--c-sat: var(--dc-sat);
		--c-lum: var(--dc-lum);

		--c-lightsat: var(--dc-lightsat);
		--c-darksat: var(--dc-darksat);
		--c-lightlum: var(--dc-lightlum);
		--c-darklum: var(--dc-darklum);

		// natural colors
		@include mxs.varHsla(--c-defwhite,0,0%,90%,.9);
		@include mxs.varHsl(--c-defblack,0,0%,0%);
  }
  @if $mode == dark {
		--c-hue: var(--dc-hue);
		--c-sat: var(--dc-sat);
		--c-lum: var(--dc-darklum);

		--c-lightsat: var(--dc-lightsat);
		--c-darksat: var(--dc-darksat);
		--c-lightlum: var(--dc-darklum);
		--c-darklum: var(--dc-lum);

		// natural colors
		@include mxs.varHsl(--c-defwhite,0,0%,0%);
		@include mxs.varHsla(--c-defblack,0,0%,90%,.9);
  }
}

// color variables
@mixin colorVars {
	@include mxs.varHsl(--c-lprimary,var(--c-hue),var(--c-sat),var(--c-lum));
	@include mxs.varHsl(--c-dprimary,var(--c-hue),var(--c-sat),var(--c-darklum));
	@include mxs.varHsl(--c-white,var(--c-hue),var(--c-sat),var(--c-lightlum));
	@include mxs.varHsl(--c-black,var(--c-hue),var(--c-darksat),var(--c-darklum));
	@include mxs.varHsl(--c-grey,var(--c-hue),var(--c-darksat),var(--c-lum));
}



/* root colors */
:root {

	// dynamic color properties
	@include colorPropValues(blue);
	// base var color properties
	@include colorProps(light);
	// base var colors
	@include colorVars;



	// static color properties
	--sc-hue: var(--dc-hue);
	--sc-sat: var(--dc-sat);
	--sc-lum: var(--dc-lum);

	--sc-lightsat: var(--dc-lightsat);
	--sc-darksat: var(--dc-darksat);
	--sc-lightlum: var(--dc-lightlum);
	--sc-darklum: var(--dc-darklum);


	// static colors
	@include mxs.varHsl(--sc-lprimary,var(--sc-hue),var(--sc-sat),var(--sc-lum));
	@include mxs.varHsl(--sc-dprimary,var(--sc-hue),var(--sc-sat),var(--sc-darklum));
	@include mxs.varHsl(--sc-white,var(--sc-hue),var(--sc-sat),var(--sc-lightlum));
	@include mxs.varHsl(--sc-black,var(--sc-hue),var(--sc-darksat),var(--sc-darklum));
	@include mxs.varHsl(--sc-grey,var(--sc-hue),var(--sc-darksat),var(--sc-lum));


	// natural colors
	@include mxs.varHsl(--c-defwhite,0,0%,90%);
	@include mxs.varHsl(--c-defblack,0,0%,0%);
}


/* export colors */
:export {
	hslLprimary: --hsl-lprimary;
	hslDprimary: --hsl-dprimary;
	hslWhite: --hsl-white;
	hslGrey: --hsl-grey;
	hslBlack: --hsl-black;


	clPrimary: --c-lprimary;
	cdPrimary: --c-dprimary;
	cWhite: --c-white;
	cBlack: --c-black;
	cGrey: --c-grey;
}




// color generate
@mixin colorGenerate($color: blue,$mode: light) {
	@include colorPropValues($color);
	@include colorProps($mode);
	@include colorVars;
}


// global light color themes
@include mxs.colorTheme(blue) {
	@include colorGenerate(blue,light);
}
@include mxs.colorTheme(green) {
	@include colorGenerate(green,light);
}
// global dark color themes
@include mxs.themes(dark) {
	@include colorProps(dark);
}




// invert light theme
@include mxs.invertTheme(light) {
	@include colorProps(dark);
	@include colorVars;
}
// invert dark theme
@include mxs.invertTheme(dark) {
	@include colorProps(light);
	@include colorVars;
}
